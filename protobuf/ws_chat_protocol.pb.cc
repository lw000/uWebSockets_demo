// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ws_chat_protocol.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ws_chat_protocol.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace ws_chat_protocol {

namespace {

const ::google::protobuf::Descriptor* ws_msg_connected_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ws_msg_connected_reflection_ = NULL;
const ::google::protobuf::Descriptor* ws_msg_error_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ws_msg_error_reflection_ = NULL;
const ::google::protobuf::Descriptor* ws_msg_chat_request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ws_msg_chat_request_reflection_ = NULL;
const ::google::protobuf::Descriptor* ws_msg_chat_replay_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ws_msg_chat_replay_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_ws_5fchat_5fprotocol_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_ws_5fchat_5fprotocol_2eproto() {
  protobuf_AddDesc_ws_5fchat_5fprotocol_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "ws_chat_protocol.proto");
  GOOGLE_CHECK(file != NULL);
  ws_msg_connected_descriptor_ = file->message_type(0);
  static const int ws_msg_connected_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ws_msg_connected, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ws_msg_connected, rid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ws_msg_connected, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ws_msg_connected, msg_),
  };
  ws_msg_connected_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ws_msg_connected_descriptor_,
      ws_msg_connected::internal_default_instance(),
      ws_msg_connected_offsets_,
      -1,
      -1,
      -1,
      sizeof(ws_msg_connected),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ws_msg_connected, _internal_metadata_));
  ws_msg_error_descriptor_ = file->message_type(1);
  static const int ws_msg_error_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ws_msg_error, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ws_msg_error, code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ws_msg_error, msg_),
  };
  ws_msg_error_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ws_msg_error_descriptor_,
      ws_msg_error::internal_default_instance(),
      ws_msg_error_offsets_,
      -1,
      -1,
      -1,
      sizeof(ws_msg_error),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ws_msg_error, _internal_metadata_));
  ws_msg_chat_request_descriptor_ = file->message_type(2);
  static const int ws_msg_chat_request_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ws_msg_chat_request, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ws_msg_chat_request, rid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ws_msg_chat_request, from_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ws_msg_chat_request, to_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ws_msg_chat_request, msg_),
  };
  ws_msg_chat_request_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ws_msg_chat_request_descriptor_,
      ws_msg_chat_request::internal_default_instance(),
      ws_msg_chat_request_offsets_,
      -1,
      -1,
      -1,
      sizeof(ws_msg_chat_request),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ws_msg_chat_request, _internal_metadata_));
  ws_msg_chat_replay_descriptor_ = file->message_type(3);
  static const int ws_msg_chat_replay_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ws_msg_chat_replay, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ws_msg_chat_replay, code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ws_msg_chat_replay, from_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ws_msg_chat_replay, msg_),
  };
  ws_msg_chat_replay_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ws_msg_chat_replay_descriptor_,
      ws_msg_chat_replay::internal_default_instance(),
      ws_msg_chat_replay_offsets_,
      -1,
      -1,
      -1,
      sizeof(ws_msg_chat_replay),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ws_msg_chat_replay, _internal_metadata_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_ws_5fchat_5fprotocol_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ws_msg_connected_descriptor_, ws_msg_connected::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ws_msg_error_descriptor_, ws_msg_error::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ws_msg_chat_request_descriptor_, ws_msg_chat_request::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ws_msg_chat_replay_descriptor_, ws_msg_chat_replay::internal_default_instance());
}

}  // namespace

void protobuf_ShutdownFile_ws_5fchat_5fprotocol_2eproto() {
  ws_msg_connected_default_instance_.Shutdown();
  delete ws_msg_connected_reflection_;
  ws_msg_error_default_instance_.Shutdown();
  delete ws_msg_error_reflection_;
  ws_msg_chat_request_default_instance_.Shutdown();
  delete ws_msg_chat_request_reflection_;
  ws_msg_chat_replay_default_instance_.Shutdown();
  delete ws_msg_chat_replay_reflection_;
}

void protobuf_InitDefaults_ws_5fchat_5fprotocol_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::GetEmptyString();
  ws_msg_connected_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  ws_msg_error_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  ws_msg_chat_request_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  ws_msg_chat_replay_default_instance_.DefaultConstruct();
  ws_msg_connected_default_instance_.get_mutable()->InitAsDefaultInstance();
  ws_msg_error_default_instance_.get_mutable()->InitAsDefaultInstance();
  ws_msg_chat_request_default_instance_.get_mutable()->InitAsDefaultInstance();
  ws_msg_chat_replay_default_instance_.get_mutable()->InitAsDefaultInstance();
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_InitDefaults_ws_5fchat_5fprotocol_2eproto_once_);
void protobuf_InitDefaults_ws_5fchat_5fprotocol_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_InitDefaults_ws_5fchat_5fprotocol_2eproto_once_,
                 &protobuf_InitDefaults_ws_5fchat_5fprotocol_2eproto_impl);
}
void protobuf_AddDesc_ws_5fchat_5fprotocol_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  protobuf_InitDefaults_ws_5fchat_5fprotocol_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\026ws_chat_protocol.proto\022\020ws_chat_protoc"
    "ol\"G\n\020ws_msg_connected\022\014\n\004time\030\001 \001(\003\022\013\n\003"
    "rid\030\002 \001(\005\022\013\n\003uid\030\003 \001(\005\022\013\n\003msg\030\004 \001(\t\"7\n\014w"
    "s_msg_error\022\014\n\004time\030\001 \001(\003\022\014\n\004code\030\002 \001(\005\022"
    "\013\n\003msg\030\003 \001(\t\"W\n\023ws_msg_chat_request\022\014\n\004t"
    "ime\030\001 \001(\003\022\013\n\003rid\030\002 \001(\005\022\014\n\004from\030\003 \001(\005\022\n\n\002"
    "to\030\004 \001(\005\022\013\n\003msg\030\005 \001(\t\"K\n\022ws_msg_chat_rep"
    "lay\022\014\n\004time\030\001 \001(\003\022\014\n\004code\030\002 \001(\005\022\014\n\004from\030"
    "\003 \001(\005\022\013\n\003msg\030\004 \001(\tb\006proto3", 346);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ws_chat_protocol.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_ws_5fchat_5fprotocol_2eproto);
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_ws_5fchat_5fprotocol_2eproto_once_);
void protobuf_AddDesc_ws_5fchat_5fprotocol_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_ws_5fchat_5fprotocol_2eproto_once_,
                 &protobuf_AddDesc_ws_5fchat_5fprotocol_2eproto_impl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_ws_5fchat_5fprotocol_2eproto {
  StaticDescriptorInitializer_ws_5fchat_5fprotocol_2eproto() {
    protobuf_AddDesc_ws_5fchat_5fprotocol_2eproto();
  }
} static_descriptor_initializer_ws_5fchat_5fprotocol_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD GOOGLE_ATTRIBUTE_NORETURN;
static void MergeFromFail(int line) {
  ::google::protobuf::internal::MergeFromFail(__FILE__, line);
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ws_msg_connected::kTimeFieldNumber;
const int ws_msg_connected::kRidFieldNumber;
const int ws_msg_connected::kUidFieldNumber;
const int ws_msg_connected::kMsgFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ws_msg_connected::ws_msg_connected()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_ws_5fchat_5fprotocol_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:ws_chat_protocol.ws_msg_connected)
}

void ws_msg_connected::InitAsDefaultInstance() {
}

ws_msg_connected::ws_msg_connected(const ws_msg_connected& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ws_chat_protocol.ws_msg_connected)
}

void ws_msg_connected::SharedCtor() {
  msg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&time_, 0, reinterpret_cast<char*>(&uid_) -
    reinterpret_cast<char*>(&time_) + sizeof(uid_));
  _cached_size_ = 0;
}

ws_msg_connected::~ws_msg_connected() {
  // @@protoc_insertion_point(destructor:ws_chat_protocol.ws_msg_connected)
  SharedDtor();
}

void ws_msg_connected::SharedDtor() {
  msg_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ws_msg_connected::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ws_msg_connected::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ws_msg_connected_descriptor_;
}

const ws_msg_connected& ws_msg_connected::default_instance() {
  protobuf_InitDefaults_ws_5fchat_5fprotocol_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<ws_msg_connected> ws_msg_connected_default_instance_;

ws_msg_connected* ws_msg_connected::New(::google::protobuf::Arena* arena) const {
  ws_msg_connected* n = new ws_msg_connected;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ws_msg_connected::Clear() {
// @@protoc_insertion_point(message_clear_start:ws_chat_protocol.ws_msg_connected)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(ws_msg_connected, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<ws_msg_connected*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(time_, uid_);
  msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

}

bool ws_msg_connected::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ws_chat_protocol.ws_msg_connected)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 time = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &time_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_rid;
        break;
      }

      // optional int32 rid = 2;
      case 2: {
        if (tag == 16) {
         parse_rid:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rid_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_uid;
        break;
      }

      // optional int32 uid = 3;
      case 3: {
        if (tag == 24) {
         parse_uid:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &uid_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_msg;
        break;
      }

      // optional string msg = 4;
      case 4: {
        if (tag == 34) {
         parse_msg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msg()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->msg().data(), this->msg().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ws_chat_protocol.ws_msg_connected.msg"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ws_chat_protocol.ws_msg_connected)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ws_chat_protocol.ws_msg_connected)
  return false;
#undef DO_
}

void ws_msg_connected::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ws_chat_protocol.ws_msg_connected)
  // optional int64 time = 1;
  if (this->time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->time(), output);
  }

  // optional int32 rid = 2;
  if (this->rid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->rid(), output);
  }

  // optional int32 uid = 3;
  if (this->uid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->uid(), output);
  }

  // optional string msg = 4;
  if (this->msg().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->msg().data(), this->msg().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ws_chat_protocol.ws_msg_connected.msg");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->msg(), output);
  }

  // @@protoc_insertion_point(serialize_end:ws_chat_protocol.ws_msg_connected)
}

::google::protobuf::uint8* ws_msg_connected::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ws_chat_protocol.ws_msg_connected)
  // optional int64 time = 1;
  if (this->time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->time(), target);
  }

  // optional int32 rid = 2;
  if (this->rid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->rid(), target);
  }

  // optional int32 uid = 3;
  if (this->uid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->uid(), target);
  }

  // optional string msg = 4;
  if (this->msg().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->msg().data(), this->msg().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ws_chat_protocol.ws_msg_connected.msg");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->msg(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:ws_chat_protocol.ws_msg_connected)
  return target;
}

size_t ws_msg_connected::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ws_chat_protocol.ws_msg_connected)
  size_t total_size = 0;

  // optional int64 time = 1;
  if (this->time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->time());
  }

  // optional int32 rid = 2;
  if (this->rid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->rid());
  }

  // optional int32 uid = 3;
  if (this->uid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->uid());
  }

  // optional string msg = 4;
  if (this->msg().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->msg());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ws_msg_connected::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ws_chat_protocol.ws_msg_connected)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ws_msg_connected* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ws_msg_connected>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ws_chat_protocol.ws_msg_connected)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ws_chat_protocol.ws_msg_connected)
    UnsafeMergeFrom(*source);
  }
}

void ws_msg_connected::MergeFrom(const ws_msg_connected& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ws_chat_protocol.ws_msg_connected)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void ws_msg_connected::UnsafeMergeFrom(const ws_msg_connected& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.time() != 0) {
    set_time(from.time());
  }
  if (from.rid() != 0) {
    set_rid(from.rid());
  }
  if (from.uid() != 0) {
    set_uid(from.uid());
  }
  if (from.msg().size() > 0) {

    msg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
}

void ws_msg_connected::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ws_chat_protocol.ws_msg_connected)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ws_msg_connected::CopyFrom(const ws_msg_connected& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ws_chat_protocol.ws_msg_connected)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool ws_msg_connected::IsInitialized() const {

  return true;
}

void ws_msg_connected::Swap(ws_msg_connected* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ws_msg_connected::InternalSwap(ws_msg_connected* other) {
  std::swap(time_, other->time_);
  std::swap(rid_, other->rid_);
  std::swap(uid_, other->uid_);
  msg_.Swap(&other->msg_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ws_msg_connected::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ws_msg_connected_descriptor_;
  metadata.reflection = ws_msg_connected_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ws_msg_connected

// optional int64 time = 1;
void ws_msg_connected::clear_time() {
  time_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 ws_msg_connected::time() const {
  // @@protoc_insertion_point(field_get:ws_chat_protocol.ws_msg_connected.time)
  return time_;
}
void ws_msg_connected::set_time(::google::protobuf::int64 value) {
  
  time_ = value;
  // @@protoc_insertion_point(field_set:ws_chat_protocol.ws_msg_connected.time)
}

// optional int32 rid = 2;
void ws_msg_connected::clear_rid() {
  rid_ = 0;
}
::google::protobuf::int32 ws_msg_connected::rid() const {
  // @@protoc_insertion_point(field_get:ws_chat_protocol.ws_msg_connected.rid)
  return rid_;
}
void ws_msg_connected::set_rid(::google::protobuf::int32 value) {
  
  rid_ = value;
  // @@protoc_insertion_point(field_set:ws_chat_protocol.ws_msg_connected.rid)
}

// optional int32 uid = 3;
void ws_msg_connected::clear_uid() {
  uid_ = 0;
}
::google::protobuf::int32 ws_msg_connected::uid() const {
  // @@protoc_insertion_point(field_get:ws_chat_protocol.ws_msg_connected.uid)
  return uid_;
}
void ws_msg_connected::set_uid(::google::protobuf::int32 value) {
  
  uid_ = value;
  // @@protoc_insertion_point(field_set:ws_chat_protocol.ws_msg_connected.uid)
}

// optional string msg = 4;
void ws_msg_connected::clear_msg() {
  msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ws_msg_connected::msg() const {
  // @@protoc_insertion_point(field_get:ws_chat_protocol.ws_msg_connected.msg)
  return msg_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ws_msg_connected::set_msg(const ::std::string& value) {
  
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ws_chat_protocol.ws_msg_connected.msg)
}
void ws_msg_connected::set_msg(const char* value) {
  
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ws_chat_protocol.ws_msg_connected.msg)
}
void ws_msg_connected::set_msg(const char* value, size_t size) {
  
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ws_chat_protocol.ws_msg_connected.msg)
}
::std::string* ws_msg_connected::mutable_msg() {
  
  // @@protoc_insertion_point(field_mutable:ws_chat_protocol.ws_msg_connected.msg)
  return msg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ws_msg_connected::release_msg() {
  // @@protoc_insertion_point(field_release:ws_chat_protocol.ws_msg_connected.msg)
  
  return msg_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ws_msg_connected::set_allocated_msg(::std::string* msg) {
  if (msg != NULL) {
    
  } else {
    
  }
  msg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), msg);
  // @@protoc_insertion_point(field_set_allocated:ws_chat_protocol.ws_msg_connected.msg)
}

inline const ws_msg_connected* ws_msg_connected::internal_default_instance() {
  return &ws_msg_connected_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ws_msg_error::kTimeFieldNumber;
const int ws_msg_error::kCodeFieldNumber;
const int ws_msg_error::kMsgFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ws_msg_error::ws_msg_error()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_ws_5fchat_5fprotocol_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:ws_chat_protocol.ws_msg_error)
}

void ws_msg_error::InitAsDefaultInstance() {
}

ws_msg_error::ws_msg_error(const ws_msg_error& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ws_chat_protocol.ws_msg_error)
}

void ws_msg_error::SharedCtor() {
  msg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&time_, 0, reinterpret_cast<char*>(&code_) -
    reinterpret_cast<char*>(&time_) + sizeof(code_));
  _cached_size_ = 0;
}

ws_msg_error::~ws_msg_error() {
  // @@protoc_insertion_point(destructor:ws_chat_protocol.ws_msg_error)
  SharedDtor();
}

void ws_msg_error::SharedDtor() {
  msg_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ws_msg_error::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ws_msg_error::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ws_msg_error_descriptor_;
}

const ws_msg_error& ws_msg_error::default_instance() {
  protobuf_InitDefaults_ws_5fchat_5fprotocol_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<ws_msg_error> ws_msg_error_default_instance_;

ws_msg_error* ws_msg_error::New(::google::protobuf::Arena* arena) const {
  ws_msg_error* n = new ws_msg_error;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ws_msg_error::Clear() {
// @@protoc_insertion_point(message_clear_start:ws_chat_protocol.ws_msg_error)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(ws_msg_error, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<ws_msg_error*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(time_, code_);
  msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

}

bool ws_msg_error::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ws_chat_protocol.ws_msg_error)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 time = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &time_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_code;
        break;
      }

      // optional int32 code = 2;
      case 2: {
        if (tag == 16) {
         parse_code:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &code_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_msg;
        break;
      }

      // optional string msg = 3;
      case 3: {
        if (tag == 26) {
         parse_msg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msg()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->msg().data(), this->msg().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ws_chat_protocol.ws_msg_error.msg"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ws_chat_protocol.ws_msg_error)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ws_chat_protocol.ws_msg_error)
  return false;
#undef DO_
}

void ws_msg_error::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ws_chat_protocol.ws_msg_error)
  // optional int64 time = 1;
  if (this->time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->time(), output);
  }

  // optional int32 code = 2;
  if (this->code() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->code(), output);
  }

  // optional string msg = 3;
  if (this->msg().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->msg().data(), this->msg().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ws_chat_protocol.ws_msg_error.msg");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->msg(), output);
  }

  // @@protoc_insertion_point(serialize_end:ws_chat_protocol.ws_msg_error)
}

::google::protobuf::uint8* ws_msg_error::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ws_chat_protocol.ws_msg_error)
  // optional int64 time = 1;
  if (this->time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->time(), target);
  }

  // optional int32 code = 2;
  if (this->code() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->code(), target);
  }

  // optional string msg = 3;
  if (this->msg().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->msg().data(), this->msg().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ws_chat_protocol.ws_msg_error.msg");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->msg(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:ws_chat_protocol.ws_msg_error)
  return target;
}

size_t ws_msg_error::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ws_chat_protocol.ws_msg_error)
  size_t total_size = 0;

  // optional int64 time = 1;
  if (this->time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->time());
  }

  // optional int32 code = 2;
  if (this->code() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->code());
  }

  // optional string msg = 3;
  if (this->msg().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->msg());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ws_msg_error::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ws_chat_protocol.ws_msg_error)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ws_msg_error* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ws_msg_error>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ws_chat_protocol.ws_msg_error)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ws_chat_protocol.ws_msg_error)
    UnsafeMergeFrom(*source);
  }
}

void ws_msg_error::MergeFrom(const ws_msg_error& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ws_chat_protocol.ws_msg_error)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void ws_msg_error::UnsafeMergeFrom(const ws_msg_error& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.time() != 0) {
    set_time(from.time());
  }
  if (from.code() != 0) {
    set_code(from.code());
  }
  if (from.msg().size() > 0) {

    msg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
}

void ws_msg_error::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ws_chat_protocol.ws_msg_error)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ws_msg_error::CopyFrom(const ws_msg_error& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ws_chat_protocol.ws_msg_error)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool ws_msg_error::IsInitialized() const {

  return true;
}

void ws_msg_error::Swap(ws_msg_error* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ws_msg_error::InternalSwap(ws_msg_error* other) {
  std::swap(time_, other->time_);
  std::swap(code_, other->code_);
  msg_.Swap(&other->msg_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ws_msg_error::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ws_msg_error_descriptor_;
  metadata.reflection = ws_msg_error_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ws_msg_error

// optional int64 time = 1;
void ws_msg_error::clear_time() {
  time_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 ws_msg_error::time() const {
  // @@protoc_insertion_point(field_get:ws_chat_protocol.ws_msg_error.time)
  return time_;
}
void ws_msg_error::set_time(::google::protobuf::int64 value) {
  
  time_ = value;
  // @@protoc_insertion_point(field_set:ws_chat_protocol.ws_msg_error.time)
}

// optional int32 code = 2;
void ws_msg_error::clear_code() {
  code_ = 0;
}
::google::protobuf::int32 ws_msg_error::code() const {
  // @@protoc_insertion_point(field_get:ws_chat_protocol.ws_msg_error.code)
  return code_;
}
void ws_msg_error::set_code(::google::protobuf::int32 value) {
  
  code_ = value;
  // @@protoc_insertion_point(field_set:ws_chat_protocol.ws_msg_error.code)
}

// optional string msg = 3;
void ws_msg_error::clear_msg() {
  msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ws_msg_error::msg() const {
  // @@protoc_insertion_point(field_get:ws_chat_protocol.ws_msg_error.msg)
  return msg_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ws_msg_error::set_msg(const ::std::string& value) {
  
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ws_chat_protocol.ws_msg_error.msg)
}
void ws_msg_error::set_msg(const char* value) {
  
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ws_chat_protocol.ws_msg_error.msg)
}
void ws_msg_error::set_msg(const char* value, size_t size) {
  
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ws_chat_protocol.ws_msg_error.msg)
}
::std::string* ws_msg_error::mutable_msg() {
  
  // @@protoc_insertion_point(field_mutable:ws_chat_protocol.ws_msg_error.msg)
  return msg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ws_msg_error::release_msg() {
  // @@protoc_insertion_point(field_release:ws_chat_protocol.ws_msg_error.msg)
  
  return msg_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ws_msg_error::set_allocated_msg(::std::string* msg) {
  if (msg != NULL) {
    
  } else {
    
  }
  msg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), msg);
  // @@protoc_insertion_point(field_set_allocated:ws_chat_protocol.ws_msg_error.msg)
}

inline const ws_msg_error* ws_msg_error::internal_default_instance() {
  return &ws_msg_error_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ws_msg_chat_request::kTimeFieldNumber;
const int ws_msg_chat_request::kRidFieldNumber;
const int ws_msg_chat_request::kFromFieldNumber;
const int ws_msg_chat_request::kToFieldNumber;
const int ws_msg_chat_request::kMsgFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ws_msg_chat_request::ws_msg_chat_request()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_ws_5fchat_5fprotocol_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:ws_chat_protocol.ws_msg_chat_request)
}

void ws_msg_chat_request::InitAsDefaultInstance() {
}

ws_msg_chat_request::ws_msg_chat_request(const ws_msg_chat_request& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ws_chat_protocol.ws_msg_chat_request)
}

void ws_msg_chat_request::SharedCtor() {
  msg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&time_, 0, reinterpret_cast<char*>(&to_) -
    reinterpret_cast<char*>(&time_) + sizeof(to_));
  _cached_size_ = 0;
}

ws_msg_chat_request::~ws_msg_chat_request() {
  // @@protoc_insertion_point(destructor:ws_chat_protocol.ws_msg_chat_request)
  SharedDtor();
}

void ws_msg_chat_request::SharedDtor() {
  msg_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ws_msg_chat_request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ws_msg_chat_request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ws_msg_chat_request_descriptor_;
}

const ws_msg_chat_request& ws_msg_chat_request::default_instance() {
  protobuf_InitDefaults_ws_5fchat_5fprotocol_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<ws_msg_chat_request> ws_msg_chat_request_default_instance_;

ws_msg_chat_request* ws_msg_chat_request::New(::google::protobuf::Arena* arena) const {
  ws_msg_chat_request* n = new ws_msg_chat_request;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ws_msg_chat_request::Clear() {
// @@protoc_insertion_point(message_clear_start:ws_chat_protocol.ws_msg_chat_request)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(ws_msg_chat_request, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<ws_msg_chat_request*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(time_, to_);
  msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

}

bool ws_msg_chat_request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ws_chat_protocol.ws_msg_chat_request)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 time = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &time_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_rid;
        break;
      }

      // optional int32 rid = 2;
      case 2: {
        if (tag == 16) {
         parse_rid:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rid_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_from;
        break;
      }

      // optional int32 from = 3;
      case 3: {
        if (tag == 24) {
         parse_from:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &from_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_to;
        break;
      }

      // optional int32 to = 4;
      case 4: {
        if (tag == 32) {
         parse_to:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &to_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_msg;
        break;
      }

      // optional string msg = 5;
      case 5: {
        if (tag == 42) {
         parse_msg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msg()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->msg().data(), this->msg().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ws_chat_protocol.ws_msg_chat_request.msg"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ws_chat_protocol.ws_msg_chat_request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ws_chat_protocol.ws_msg_chat_request)
  return false;
#undef DO_
}

void ws_msg_chat_request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ws_chat_protocol.ws_msg_chat_request)
  // optional int64 time = 1;
  if (this->time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->time(), output);
  }

  // optional int32 rid = 2;
  if (this->rid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->rid(), output);
  }

  // optional int32 from = 3;
  if (this->from() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->from(), output);
  }

  // optional int32 to = 4;
  if (this->to() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->to(), output);
  }

  // optional string msg = 5;
  if (this->msg().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->msg().data(), this->msg().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ws_chat_protocol.ws_msg_chat_request.msg");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->msg(), output);
  }

  // @@protoc_insertion_point(serialize_end:ws_chat_protocol.ws_msg_chat_request)
}

::google::protobuf::uint8* ws_msg_chat_request::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ws_chat_protocol.ws_msg_chat_request)
  // optional int64 time = 1;
  if (this->time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->time(), target);
  }

  // optional int32 rid = 2;
  if (this->rid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->rid(), target);
  }

  // optional int32 from = 3;
  if (this->from() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->from(), target);
  }

  // optional int32 to = 4;
  if (this->to() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->to(), target);
  }

  // optional string msg = 5;
  if (this->msg().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->msg().data(), this->msg().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ws_chat_protocol.ws_msg_chat_request.msg");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->msg(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:ws_chat_protocol.ws_msg_chat_request)
  return target;
}

size_t ws_msg_chat_request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ws_chat_protocol.ws_msg_chat_request)
  size_t total_size = 0;

  // optional int64 time = 1;
  if (this->time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->time());
  }

  // optional int32 rid = 2;
  if (this->rid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->rid());
  }

  // optional int32 from = 3;
  if (this->from() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->from());
  }

  // optional int32 to = 4;
  if (this->to() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->to());
  }

  // optional string msg = 5;
  if (this->msg().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->msg());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ws_msg_chat_request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ws_chat_protocol.ws_msg_chat_request)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ws_msg_chat_request* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ws_msg_chat_request>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ws_chat_protocol.ws_msg_chat_request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ws_chat_protocol.ws_msg_chat_request)
    UnsafeMergeFrom(*source);
  }
}

void ws_msg_chat_request::MergeFrom(const ws_msg_chat_request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ws_chat_protocol.ws_msg_chat_request)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void ws_msg_chat_request::UnsafeMergeFrom(const ws_msg_chat_request& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.time() != 0) {
    set_time(from.time());
  }
  if (from.rid() != 0) {
    set_rid(from.rid());
  }
  if (from.from() != 0) {
    set_from(from.from());
  }
  if (from.to() != 0) {
    set_to(from.to());
  }
  if (from.msg().size() > 0) {

    msg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
}

void ws_msg_chat_request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ws_chat_protocol.ws_msg_chat_request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ws_msg_chat_request::CopyFrom(const ws_msg_chat_request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ws_chat_protocol.ws_msg_chat_request)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool ws_msg_chat_request::IsInitialized() const {

  return true;
}

void ws_msg_chat_request::Swap(ws_msg_chat_request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ws_msg_chat_request::InternalSwap(ws_msg_chat_request* other) {
  std::swap(time_, other->time_);
  std::swap(rid_, other->rid_);
  std::swap(from_, other->from_);
  std::swap(to_, other->to_);
  msg_.Swap(&other->msg_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ws_msg_chat_request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ws_msg_chat_request_descriptor_;
  metadata.reflection = ws_msg_chat_request_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ws_msg_chat_request

// optional int64 time = 1;
void ws_msg_chat_request::clear_time() {
  time_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 ws_msg_chat_request::time() const {
  // @@protoc_insertion_point(field_get:ws_chat_protocol.ws_msg_chat_request.time)
  return time_;
}
void ws_msg_chat_request::set_time(::google::protobuf::int64 value) {
  
  time_ = value;
  // @@protoc_insertion_point(field_set:ws_chat_protocol.ws_msg_chat_request.time)
}

// optional int32 rid = 2;
void ws_msg_chat_request::clear_rid() {
  rid_ = 0;
}
::google::protobuf::int32 ws_msg_chat_request::rid() const {
  // @@protoc_insertion_point(field_get:ws_chat_protocol.ws_msg_chat_request.rid)
  return rid_;
}
void ws_msg_chat_request::set_rid(::google::protobuf::int32 value) {
  
  rid_ = value;
  // @@protoc_insertion_point(field_set:ws_chat_protocol.ws_msg_chat_request.rid)
}

// optional int32 from = 3;
void ws_msg_chat_request::clear_from() {
  from_ = 0;
}
::google::protobuf::int32 ws_msg_chat_request::from() const {
  // @@protoc_insertion_point(field_get:ws_chat_protocol.ws_msg_chat_request.from)
  return from_;
}
void ws_msg_chat_request::set_from(::google::protobuf::int32 value) {
  
  from_ = value;
  // @@protoc_insertion_point(field_set:ws_chat_protocol.ws_msg_chat_request.from)
}

// optional int32 to = 4;
void ws_msg_chat_request::clear_to() {
  to_ = 0;
}
::google::protobuf::int32 ws_msg_chat_request::to() const {
  // @@protoc_insertion_point(field_get:ws_chat_protocol.ws_msg_chat_request.to)
  return to_;
}
void ws_msg_chat_request::set_to(::google::protobuf::int32 value) {
  
  to_ = value;
  // @@protoc_insertion_point(field_set:ws_chat_protocol.ws_msg_chat_request.to)
}

// optional string msg = 5;
void ws_msg_chat_request::clear_msg() {
  msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ws_msg_chat_request::msg() const {
  // @@protoc_insertion_point(field_get:ws_chat_protocol.ws_msg_chat_request.msg)
  return msg_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ws_msg_chat_request::set_msg(const ::std::string& value) {
  
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ws_chat_protocol.ws_msg_chat_request.msg)
}
void ws_msg_chat_request::set_msg(const char* value) {
  
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ws_chat_protocol.ws_msg_chat_request.msg)
}
void ws_msg_chat_request::set_msg(const char* value, size_t size) {
  
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ws_chat_protocol.ws_msg_chat_request.msg)
}
::std::string* ws_msg_chat_request::mutable_msg() {
  
  // @@protoc_insertion_point(field_mutable:ws_chat_protocol.ws_msg_chat_request.msg)
  return msg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ws_msg_chat_request::release_msg() {
  // @@protoc_insertion_point(field_release:ws_chat_protocol.ws_msg_chat_request.msg)
  
  return msg_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ws_msg_chat_request::set_allocated_msg(::std::string* msg) {
  if (msg != NULL) {
    
  } else {
    
  }
  msg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), msg);
  // @@protoc_insertion_point(field_set_allocated:ws_chat_protocol.ws_msg_chat_request.msg)
}

inline const ws_msg_chat_request* ws_msg_chat_request::internal_default_instance() {
  return &ws_msg_chat_request_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ws_msg_chat_replay::kTimeFieldNumber;
const int ws_msg_chat_replay::kCodeFieldNumber;
const int ws_msg_chat_replay::kFromFieldNumber;
const int ws_msg_chat_replay::kMsgFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ws_msg_chat_replay::ws_msg_chat_replay()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_ws_5fchat_5fprotocol_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:ws_chat_protocol.ws_msg_chat_replay)
}

void ws_msg_chat_replay::InitAsDefaultInstance() {
}

ws_msg_chat_replay::ws_msg_chat_replay(const ws_msg_chat_replay& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ws_chat_protocol.ws_msg_chat_replay)
}

void ws_msg_chat_replay::SharedCtor() {
  msg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&time_, 0, reinterpret_cast<char*>(&from_) -
    reinterpret_cast<char*>(&time_) + sizeof(from_));
  _cached_size_ = 0;
}

ws_msg_chat_replay::~ws_msg_chat_replay() {
  // @@protoc_insertion_point(destructor:ws_chat_protocol.ws_msg_chat_replay)
  SharedDtor();
}

void ws_msg_chat_replay::SharedDtor() {
  msg_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ws_msg_chat_replay::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ws_msg_chat_replay::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ws_msg_chat_replay_descriptor_;
}

const ws_msg_chat_replay& ws_msg_chat_replay::default_instance() {
  protobuf_InitDefaults_ws_5fchat_5fprotocol_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<ws_msg_chat_replay> ws_msg_chat_replay_default_instance_;

ws_msg_chat_replay* ws_msg_chat_replay::New(::google::protobuf::Arena* arena) const {
  ws_msg_chat_replay* n = new ws_msg_chat_replay;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ws_msg_chat_replay::Clear() {
// @@protoc_insertion_point(message_clear_start:ws_chat_protocol.ws_msg_chat_replay)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(ws_msg_chat_replay, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<ws_msg_chat_replay*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(time_, from_);
  msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

}

bool ws_msg_chat_replay::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ws_chat_protocol.ws_msg_chat_replay)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 time = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &time_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_code;
        break;
      }

      // optional int32 code = 2;
      case 2: {
        if (tag == 16) {
         parse_code:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &code_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_from;
        break;
      }

      // optional int32 from = 3;
      case 3: {
        if (tag == 24) {
         parse_from:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &from_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_msg;
        break;
      }

      // optional string msg = 4;
      case 4: {
        if (tag == 34) {
         parse_msg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msg()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->msg().data(), this->msg().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ws_chat_protocol.ws_msg_chat_replay.msg"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ws_chat_protocol.ws_msg_chat_replay)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ws_chat_protocol.ws_msg_chat_replay)
  return false;
#undef DO_
}

void ws_msg_chat_replay::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ws_chat_protocol.ws_msg_chat_replay)
  // optional int64 time = 1;
  if (this->time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->time(), output);
  }

  // optional int32 code = 2;
  if (this->code() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->code(), output);
  }

  // optional int32 from = 3;
  if (this->from() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->from(), output);
  }

  // optional string msg = 4;
  if (this->msg().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->msg().data(), this->msg().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ws_chat_protocol.ws_msg_chat_replay.msg");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->msg(), output);
  }

  // @@protoc_insertion_point(serialize_end:ws_chat_protocol.ws_msg_chat_replay)
}

::google::protobuf::uint8* ws_msg_chat_replay::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ws_chat_protocol.ws_msg_chat_replay)
  // optional int64 time = 1;
  if (this->time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->time(), target);
  }

  // optional int32 code = 2;
  if (this->code() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->code(), target);
  }

  // optional int32 from = 3;
  if (this->from() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->from(), target);
  }

  // optional string msg = 4;
  if (this->msg().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->msg().data(), this->msg().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ws_chat_protocol.ws_msg_chat_replay.msg");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->msg(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:ws_chat_protocol.ws_msg_chat_replay)
  return target;
}

size_t ws_msg_chat_replay::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ws_chat_protocol.ws_msg_chat_replay)
  size_t total_size = 0;

  // optional int64 time = 1;
  if (this->time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->time());
  }

  // optional int32 code = 2;
  if (this->code() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->code());
  }

  // optional int32 from = 3;
  if (this->from() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->from());
  }

  // optional string msg = 4;
  if (this->msg().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->msg());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ws_msg_chat_replay::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ws_chat_protocol.ws_msg_chat_replay)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ws_msg_chat_replay* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ws_msg_chat_replay>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ws_chat_protocol.ws_msg_chat_replay)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ws_chat_protocol.ws_msg_chat_replay)
    UnsafeMergeFrom(*source);
  }
}

void ws_msg_chat_replay::MergeFrom(const ws_msg_chat_replay& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ws_chat_protocol.ws_msg_chat_replay)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void ws_msg_chat_replay::UnsafeMergeFrom(const ws_msg_chat_replay& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.time() != 0) {
    set_time(from.time());
  }
  if (from.code() != 0) {
    set_code(from.code());
  }
  if (from.from() != 0) {
    set_from(from.from());
  }
  if (from.msg().size() > 0) {

    msg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
}

void ws_msg_chat_replay::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ws_chat_protocol.ws_msg_chat_replay)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ws_msg_chat_replay::CopyFrom(const ws_msg_chat_replay& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ws_chat_protocol.ws_msg_chat_replay)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool ws_msg_chat_replay::IsInitialized() const {

  return true;
}

void ws_msg_chat_replay::Swap(ws_msg_chat_replay* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ws_msg_chat_replay::InternalSwap(ws_msg_chat_replay* other) {
  std::swap(time_, other->time_);
  std::swap(code_, other->code_);
  std::swap(from_, other->from_);
  msg_.Swap(&other->msg_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ws_msg_chat_replay::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ws_msg_chat_replay_descriptor_;
  metadata.reflection = ws_msg_chat_replay_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ws_msg_chat_replay

// optional int64 time = 1;
void ws_msg_chat_replay::clear_time() {
  time_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 ws_msg_chat_replay::time() const {
  // @@protoc_insertion_point(field_get:ws_chat_protocol.ws_msg_chat_replay.time)
  return time_;
}
void ws_msg_chat_replay::set_time(::google::protobuf::int64 value) {
  
  time_ = value;
  // @@protoc_insertion_point(field_set:ws_chat_protocol.ws_msg_chat_replay.time)
}

// optional int32 code = 2;
void ws_msg_chat_replay::clear_code() {
  code_ = 0;
}
::google::protobuf::int32 ws_msg_chat_replay::code() const {
  // @@protoc_insertion_point(field_get:ws_chat_protocol.ws_msg_chat_replay.code)
  return code_;
}
void ws_msg_chat_replay::set_code(::google::protobuf::int32 value) {
  
  code_ = value;
  // @@protoc_insertion_point(field_set:ws_chat_protocol.ws_msg_chat_replay.code)
}

// optional int32 from = 3;
void ws_msg_chat_replay::clear_from() {
  from_ = 0;
}
::google::protobuf::int32 ws_msg_chat_replay::from() const {
  // @@protoc_insertion_point(field_get:ws_chat_protocol.ws_msg_chat_replay.from)
  return from_;
}
void ws_msg_chat_replay::set_from(::google::protobuf::int32 value) {
  
  from_ = value;
  // @@protoc_insertion_point(field_set:ws_chat_protocol.ws_msg_chat_replay.from)
}

// optional string msg = 4;
void ws_msg_chat_replay::clear_msg() {
  msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ws_msg_chat_replay::msg() const {
  // @@protoc_insertion_point(field_get:ws_chat_protocol.ws_msg_chat_replay.msg)
  return msg_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ws_msg_chat_replay::set_msg(const ::std::string& value) {
  
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ws_chat_protocol.ws_msg_chat_replay.msg)
}
void ws_msg_chat_replay::set_msg(const char* value) {
  
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ws_chat_protocol.ws_msg_chat_replay.msg)
}
void ws_msg_chat_replay::set_msg(const char* value, size_t size) {
  
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ws_chat_protocol.ws_msg_chat_replay.msg)
}
::std::string* ws_msg_chat_replay::mutable_msg() {
  
  // @@protoc_insertion_point(field_mutable:ws_chat_protocol.ws_msg_chat_replay.msg)
  return msg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ws_msg_chat_replay::release_msg() {
  // @@protoc_insertion_point(field_release:ws_chat_protocol.ws_msg_chat_replay.msg)
  
  return msg_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ws_msg_chat_replay::set_allocated_msg(::std::string* msg) {
  if (msg != NULL) {
    
  } else {
    
  }
  msg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), msg);
  // @@protoc_insertion_point(field_set_allocated:ws_chat_protocol.ws_msg_chat_replay.msg)
}

inline const ws_msg_chat_replay* ws_msg_chat_replay::internal_default_instance() {
  return &ws_msg_chat_replay_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace ws_chat_protocol

// @@protoc_insertion_point(global_scope)
